'forge clean' running (wd: /home/solimul/MyComputer/defi-projects/MinDex)
'forge config --json' running
'forge build --build-info --skip */test/** */script/** --force' running (wd: /home/solimul/MyComputer/defi-projects/MinDex)
INFO:Detectors:
LPool.fundContract(address) (src/LPool.sol#141-156) uses arbitrary from in transferFrom: usdcSuccess = IERC20(i_usdc).transferFrom(sender,address(this),s_reserveUSDC) (src/LPool.sol#150)
LPool.fundContract(address) (src/LPool.sol#141-156) uses arbitrary from in transferFrom: ethSuccess = IERC20(i_eth).transferFrom(sender,address(this),s_reserveETH) (src/LPool.sol#151)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#arbitrary-from-in-transferfrom
INFO:Detectors:
AMM.calculateOutAmount(uint256,address,address).reserveIn (src/AMM.sol#141) is a local variable never initialized
AMM.calculateOutAmount(uint256,address,address).reserveOut (src/AMM.sol#142) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
MyERC20.constructor(string,string).name (mocks/MyERC20.sol#46) shadows:
        - ERC20.name() (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#52-54) (function)
        - IERC20Metadata.name() (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#15) (function)
MyERC20.constructor(string,string).symbol (mocks/MyERC20.sol#46) shadows:
        - ERC20.symbol() (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#60-62) (function)
        - IERC20Metadata.symbol() (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#20) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
MyERC20.enableReentrancyAttack(address)._target (mocks/MyERC20.sol#58) lacks a zero-check on :
                - reentrancyTarget = _target (mocks/MyERC20.sol#60)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in MinimalDex.swap(uint256,uint256,string,string) (src/MinimalDex.sol#120-157):
        External calls:
        - (LPool(amm.getLPoolAddress())).updateLPool(tokenOut,amountIn,amountOut) (src/MinimalDex.sol#141)
        - safeTransferFrom(tokenIn,from,to,amountIn) (src/MinimalDex.sol#147)
                - (success,data) = token.call(abi.encodeWithSelector(IERC20.transferFrom.selector,from,to,amount)) (src/MinimalDex.sol#110-112)
        - safeTransferFrom(tokenOut,to,from,amountOut) (src/MinimalDex.sol#153)
                - (success,data) = token.call(abi.encodeWithSelector(IERC20.transferFrom.selector,from,to,amount)) (src/MinimalDex.sol#110-112)
        Event emitted after the call(s):
        - Swapped(amountIn,tokenIn,amountOut,tokenOut) (src/MinimalDex.sol#155)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
console._sendLogPayloadImplementation(bytes) (lib/forge-std/src/console.sol#8-23) uses assembly
        - INLINE ASM (lib/forge-std/src/console.sol#11-22)
console._castToPure(function(bytes)) (lib/forge-std/src/console.sol#25-31) uses assembly
        - INLINE ASM (lib/forge-std/src/console.sol#28-30)
SafeERC20._callOptionalReturn(IERC20,bytes) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#173-191) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#176-186)
SafeERC20._callOptionalReturnBool(IERC20,bytes) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#201-211) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#205-209)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
3 different versions of Solidity are used:
        - Version constraint >=0.4.22<0.9.0 is used by:
                ->=0.4.22<0.9.0 (lib/forge-std/src/console.sol#2)
        - Version constraint ^0.8.20 is used by:
                -^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol#4)
                -^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol#4)
                -^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol#4)
                -^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol#3)
                -^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#4)
                -^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol#4)
                -^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
                -^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#4)
                -^0.8.20 (lib/openzeppelin-contracts/contracts/utils/Context.sol#4)
                -^0.8.20 (lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol#4)
        - Version constraint 0.8.30 is used by:
                -0.8.30 (mocks/MyERC20.sol#24)
                -0.8.30 (src/AMM.sol#24)
                -0.8.30 (src/LPool.sol#24)
                -0.8.30 (src/MinimalDex.sol#25)
                -0.8.30 (src/NetworkConfig.sol#24)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Version constraint >=0.4.22<0.9.0 is too complex.
It is used by:
        - >=0.4.22<0.9.0 (lib/forge-std/src/console.sol#2)
Version constraint ^0.8.20 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
        - VerbatimInvalidDeduplication
        - FullInlinerNonExpressionSplitArgumentEvaluationOrder
        - MissingSideEffectsOnSelectorAccess.
It is used by:
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol#3)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/Context.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol#4)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in MinimalDex.safeTransferFrom(address,address,address,uint256) (src/MinimalDex.sol#109-117):
        - (success,data) = token.call(abi.encodeWithSelector(IERC20.transferFrom.selector,from,to,amount)) (src/MinimalDex.sol#110-112)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Contract console (lib/forge-std/src/console.sol#4-1560) is not in CapWords
Parameter MyERC20.enableReentrancyAttack(address)._target (mocks/MyERC20.sol#58) is not in mixedCase
Variable NetworkConfig.i_MyERC20_usdc (src/NetworkConfig.sol#47) is not in mixedCase
Variable NetworkConfig.i_MyERC20_eth (src/NetworkConfig.sol#48) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
AMM.i_owner (src/AMM.sol#63) is never used in AMM (src/AMM.sol#39-172)
NetworkConfig.i_MyERC20_usdc (src/NetworkConfig.sol#47) is never used in NetworkConfig (src/NetworkConfig.sol#42-80)
NetworkConfig.i_MyERC20_eth (src/NetworkConfig.sol#48) is never used in NetworkConfig (src/NetworkConfig.sol#42-80)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable
INFO:Detectors:
AMM.lPool (src/AMM.sol#62) should be immutable 
MinimalDex.amm (src/MinimalDex.sol#49) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:. analyzed (17 contracts with 100 detectors), 25 result(s) found